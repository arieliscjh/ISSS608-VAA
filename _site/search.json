[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman packages to check if tidyverse packages are installed in the computer. if they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman packages to check if tidyverse packages are installed in the computer. if they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\n\nhist(exam_data$MATHS)\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density()",
    "text": "1.7.6 Geometric Objects: geom-density()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.4 Adding a best fit curve on a scatterplot",
    "text": "1.8.4 Adding a best fit curve on a scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on_Ex2",
    "section": "",
    "text": "This week hands-on exercise will use ggplot2 extensions\n\ncontrol the placement of annotation on a graph\ncreate professional publication quality figure\ncreate composite figure : combining multiple graph into one"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#install-and-load-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#install-and-load-libraries",
    "title": "Hands-on_Ex2",
    "section": "2.2.1 Install and load libraries",
    "text": "2.2.1 Install and load libraries\nR packages needed other than tidyverse:\n\nggrepel: prevent overlapping text labels\nggthemes: provide extra themes, geoms, and scales\nhrbrthemes: typography-centric themes\npatchwork: preparing composite figure\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#importing-data",
    "title": "Hands-on_Ex2",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#after-applying-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#after-applying-ggrepel",
    "title": "Hands-on_Ex2",
    "section": "2.3.1 After applying ggrepel",
    "text": "2.3.1 After applying ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nAfter comparing the graph made with ggrepel and without ggrepel, we can clearly see that ggrepel help to manage the separation among all the label tags"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#after-applying-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#after-applying-ggtheme",
    "title": "Hands-on_Ex2",
    "section": "2.4.1 After applying ggtheme",
    "text": "2.4.1 After applying ggtheme\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#working-with-hrbthems",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#working-with-hrbthems",
    "title": "Hands-on_Ex2",
    "section": "2.4.2 Working with hrbthems",
    "text": "2.4.2 Working with hrbthems\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\nThe changes showed in the graph is that the text move under the end of x and y axis. Now let’s make the change more specific to see where the element of hrbrthemes should be used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\nSo, in this graph, we further applied hrbthems package as specify the size of the title and add grid."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-composite-graphics-using-patchwork",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-composite-graphics-using-patchwork",
    "title": "Hands-on_Ex2",
    "section": "2.5.1 Creating Composite Graphics: using patchwork",
    "text": "2.5.1 Creating Composite Graphics: using patchwork\nUsage of patchwork:\n\nTwo-Column Layout using the Plus Sign +\nParenthesis () to create a subplot group\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combine-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combine-two-ggplot2-graphs",
    "title": "Hands-on_Ex2",
    "section": "2.5.2 Combine two ggplot2 graphs (“+”)",
    "text": "2.5.2 Combine two ggplot2 graphs (“+”)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-figure-with-insert",
    "title": "Hands-on_Ex2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nInsert one graph inside another one graph\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-using-both-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-using-both-patchwork-and-ggtheme",
    "title": "Hands-on_Ex2",
    "section": "2.5.6 Creating a composite figure using both patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure using both patchwork and ggtheme\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on_Ex3",
    "section": "",
    "text": "Create interactive data visualization by using ggiraph and plotlyr package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on_Ex3",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\n\n# step 1: ggplot object will be created \np &lt;- ggplot(data= exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n# step2: ggiraph will be used to create an interactive svg object\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nThe student’s ID will displayed by hovering the mouse pointer on an data point"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on_Ex3",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nNow The student’s name and class number will displayed by hovering the mouse pointer on an data point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#customising-tooltip-style",
    "title": "Hands-on_Ex3",
    "section": "3.6.1 Customising Tooltip Style",
    "text": "3.6.1 Customising Tooltip Style\nopts_tooltip() of ggiraph to customize tooltip rendering by add css declarations\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nIn this graph, the background color of the tooltip is black and the font color is white and bold"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#displaying-statistics-on-tooltip",
    "title": "Hands-on_Ex3",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nThe code below is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on_Ex3",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(tooltip = CLASS, \n        data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nFrom the graph showing above, when you hover the mouse on it, the orange dot means that those students come from same class."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#styling-hover-effect",
    "title": "Hands-on_Ex3",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\ncss codes are used to change the highlighting effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj= p,\n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options= list(\n    opts_hover(css= \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on_Ex3",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nFrom this graph, after combine the tooltip and hover effect, now we can see that when hover on the graph, the highlight dot its the students that come from same class, as well can know their class number at the same time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#click-effect-with-onclick",
    "title": "Hands-on_Ex3",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\nexam_data$tooltip &lt;- c(\n  \"Click me !\"\n)\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick,\n        tooltip=tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser after click on the grpah\n\nThe click actions must be a string column in the dataset containing valid instructions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on_Ex3",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data plot will be highlighted as well. Therefore, using this view, it is able to see both math and English score of a student."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#creating-an-interactive-scatter-plot-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#creating-an-interactive-scatter-plot-plot_ly",
    "title": "Hands-on_Ex3",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly()",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly()\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on_Ex3",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\ncolor argument is mapped to a qualitative visual variable\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on_Ex3",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly () method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly () method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#coordinated-multiple-view-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#coordinated-multiple-view-with-plotly",
    "title": "Hands-on_Ex3",
    "section": "3.7.4 Coordinated Multiple view with plotly",
    "text": "3.7.4 Coordinated Multiple view with plotly\nThe creation of a corrdinated linked plot by using plotly involves three steps:\n\nhighlight_key: of plotly package is used as shared data\ntwo scatterplots will be created by using ggplot2 functions\nsubplot() if plotly package is used to place them next to each other side by side\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nFrom this graph, it is able to compare the relationship of math score with both English score and science score."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#interactive-data-table-dt-package",
    "title": "Hands-on_Ex3",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#linked-brushing-crosstalk-method",
    "title": "Hands-on_Ex3",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "title": "Hands-on_Ex3",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nThis section is to learn how to create animated data visualization\n\nusing gganimate and plotly r packages\nreshape data using tidyr packages\nprocess, wrangle, and transform data using dplyr packages\n\n\n4.1.1 Basic concept of animation\nEach frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#loading-the-r-packages",
    "title": "Hands-on_Ex3",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-the-data",
    "title": "Hands-on_Ex3",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-a-static-population-bubble-plot",
    "title": "Hands-on_Ex3",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-the-animated-bubble-plot",
    "title": "Hands-on_Ex3",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\np &lt;- ggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')\n\nWe can see the moving on the graph showing above."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-an-animated-bubble-plot-ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-an-animated-bubble-plot-ggplotly",
    "title": "Hands-on_Ex3",
    "section": "4.4.1 Building an animated bubble plot: ggplotly()",
    "text": "4.4.1 Building an animated bubble plot: ggplotly()\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nIn this graph, we can click the play button to see the change over years and click slider to choose certain year you are interested in. Besides, each scatter also able to click to choose to display or not to display.\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Ex3",
    "section": "4.2.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.2.2 Building an animated bubble plot: plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on_Ex4",
    "section": "",
    "text": "Statistical graph methods for visualizing distribution: ridgeline plot and raincloud plot\n\n\n\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot: revealing the distribution of a numeric value for several groups, using histograms or density plot and all aligned to the same horizontal scale and presented with a slight overlap.\n\nMore make sense when the number of group to represent is medium to high\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups\n\n\n\n\ngeom_ridgeline() : takes height values directly to draw the ridgeline\ngeom_density_ridges() : first estimates data densities and then draws those using ridgelines.\n\n\n\n“Show the code”\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThis effect can be achieved by using either  geom_ridgeline_gradient() or geom_density_ridges_gradient()\n\n\n“Show the code”\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThis can achieved by using fucntion stat_density_ridges().\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nQuantiles can be defined by using color and percentage\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. The rainclould (half-density) plot enhances the traditional box-plot by highlighting multiple moralities.\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome",
    "title": "Hands-on_Ex4",
    "section": "",
    "text": "Statistical graph methods for visualizing distribution: ridgeline plot and raincloud plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on_Ex4",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-distribution-with-ridgeline-plot",
    "title": "Hands-on_Ex4",
    "section": "",
    "text": "Ridgeline plot: revealing the distribution of a numeric value for several groups, using histograms or density plot and all aligned to the same horizontal scale and presented with a slight overlap.\n\nMore make sense when the number of group to represent is medium to high\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups\n\n\n\n\ngeom_ridgeline() : takes height values directly to draw the ridgeline\ngeom_density_ridges() : first estimates data densities and then draws those using ridgelines.\n\n\n\n“Show the code”\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThis effect can be achieved by using either  geom_ridgeline_gradient() or geom_density_ridges_gradient()\n\n\n“Show the code”\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThis can achieved by using fucntion stat_density_ridges().\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nQuantiles can be defined by using color and percentage\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-distribution-with-raincloud-plot",
    "title": "Hands-on_Ex4",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. The rainclould (half-density) plot enhances the traditional box-plot by highlighting multiple moralities.\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome-1",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome-1",
    "title": "Hands-on_Ex4",
    "section": "10.1 Learning Outcome",
    "text": "10.1 Learning Outcome\n\nCreate visual graphics with rich statistical information\nperformance package to visualize model diagnostics, and\nparameters package to visualize model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on_Ex4",
    "section": "10.2 Visual Statistical analysis with ggstatsplot",
    "text": "10.2 Visual Statistical analysis with ggstatsplot\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-1",
    "title": "Hands-on_Ex4",
    "section": "10.3 Getting Started",
    "text": "10.3 Getting Started\n\n10.3.1 Loading packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n10.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#one-sample-test-gghistostats-method",
    "title": "Hands-on_Ex4",
    "section": "10.4 One-Sample test: gghistostats() method",
    "text": "10.4 One-Sample test: gghistostats() method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n10.4.1 Unpacking the Bayes Factor\n\n\nA Bayes factor\n\nis the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\ngives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\n\n\n\n10.4.2 Interpretation of Bayes Factor\nA Bayes factor can be any positive number"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#two-sample-mean-test-ggbetweenstats--math-score-by-gender",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#two-sample-mean-test-ggbetweenstats--math-score-by-gender",
    "title": "Hands-on_Ex4",
    "section": "10.5 Two-sample mean test: ggbetweenstats() -Math score by Gender",
    "text": "10.5 Two-sample mean test: ggbetweenstats() -Math score by Gender\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#oneway-anova-test-ggbetweenstats-method--english-score-by-race",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#oneway-anova-test-ggbetweenstats-method--english-score-by-race",
    "title": "Hands-on_Ex4",
    "section": "10.6 Oneway ANOVA Test: ggbetweenstats() method- English score by race",
    "text": "10.6 Oneway ANOVA Test: ggbetweenstats() method- English score by race\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n10.6.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#significant-test-of-correlation-ggscatterstats--math-score-and-english-score",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#significant-test-of-correlation-ggscatterstats--math-score-and-english-score",
    "title": "Hands-on_Ex4",
    "section": "10.7 Significant Test of Correlation: ggscatterstats()- Math score and English score",
    "text": "10.7 Significant Test of Correlation: ggscatterstats()- Math score and English score\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on_Ex4",
    "section": "10.8 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "10.8 Significant Test of Association (Depedence) : ggbarstats() methods\n\n# Maths scores is binned into a 4-class variable by using cut().\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n# build a visual for significant test\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-models",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-models",
    "title": "Hands-on_Ex4",
    "section": "10.9 Visualizing models",
    "text": "10.9 Visualizing models\nYou will learn how to visualise model diagnostic and model parameters by using parameters package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-2",
    "title": "Hands-on_Ex4",
    "section": "10.10 Getting started",
    "text": "10.10 Getting started\n\n10.10.1 Loading the package\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n10.10.2 Importing data\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n10.11 Multiple Regression Model using lm()\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n10.11.1 Checking for multicolinearity:\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n10.11.2 Checking for normality\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n10.11.3 Checking for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n10.11.4 Complete check\n\ncheck_model(model1)\n\n\n\n\n\n\n10.12 Visualising Regression Parameters: see methods\n\nplot(parameters(model1))\n\n\n\n\n\n\n10.13 Visualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome-2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#learning-outcome-2",
    "title": "Hands-on_Ex4",
    "section": "11.1 Learning Outcome",
    "text": "11.1 Learning Outcome\ncreating statistical graphics for visualizing uncertainty"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-3",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started-3",
    "title": "Hands-on_Ex4",
    "section": "11.2 Getting Started",
    "text": "11.2 Getting Started\n\n11.2.1 Loading the packagers\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n11.2.2 Data import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-the-uncertainty-of-point-estimate-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-the-uncertainty-of-point-estimate-ggplot2-methods",
    "title": "Hands-on_Ex4",
    "section": "11.3 Visualizing the uncertainty of point estimate: ggplot2 methods",
    "text": "11.3 Visualizing the uncertainty of point estimate: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, is expressed as standard error, confidence interval, or credible interval.\nDerive the necessary summary statistics\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n11.3.1 Plotting standard error bars of point estimates\nStandard error bars of mean maths score by race\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n11.3.2 Plotting confidence interval of point estimates\nConfidence intervals of mean maths score by race\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nInteractive error bars for the 99% confidence interval of mean math score by race\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualizing-uncertainty-ggdist-package",
    "title": "Hands-on_Ex4",
    "section": "11.4 Visualizing uncertainty: ggdist package",
    "text": "11.4 Visualizing uncertainty: ggdist package\n\n11.4.1 Visualizing the uncertainty of point estimates: ggdist method\nDistribution of maths score by race\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nconfidence intervals of median math score\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = c(0.95, 0.99),\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n11.4.2 Visualizing the uncertainty of point estimates: ggdist method\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n11.4.3 Visualizing the uncertainty of point estimates: ggdist method\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on_Ex4",
    "section": "11.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "11.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on_Ex4",
    "section": "11.6 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "11.6 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "title": "Hands-on_Ex4",
    "section": "12.1 Overview",
    "text": "12.1 Overview\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.\n\n12.2 Loading Packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#funnelplotr-methods",
    "title": "Hands-on_Ex4",
    "section": "12.4 FunnelPlotR methods",
    "text": "12.4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n12.4.1 FunnelPlotsR methods: The basic plot\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n12.4.2 FunnelPlotsR methods: Makeover 1\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt; proportions\n  xrange = c(0, 6500),  #&lt;&lt; set the range\n  yrange = c(0, 0.05)   #&lt;&lt; set the range\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n12.4.3 FunnelPlotsR methods: Makeover 2\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on_Ex4",
    "section": "12.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "12.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\n\n12.5.1 Computing the basic derived fields\nDerive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n12.5.2 Calculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n12.5.3 Plotting a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n12.5.4 Interactive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data.\nIt’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components.\n\n\n\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load(plotly, ggtern, tidyverse)\n\n\n\n\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#overview",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data.\nIt’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#loading-r-packages",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "ggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#importing-data",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "pop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#preparing-data",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#preparing-data",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on_Ex5",
    "section": "",
    "text": "#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. \nThe values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. \nReasons for computing a correlation matrix\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\n\n\n\nTo input into other analyses\nAs a diagnostic when checking other analyses\n\nCorrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables\nTwo main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\n\n\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n\n\n\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\n\n\n\n\n\n\n\npairs(wine[,1:11])\n\n\n\n\nIt uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested\n\n\nAdvantage of using ggcorrmat() over many other method to visualize a correlation matrix is its ability to provide a comprehensive and yet professional statistical report\n\nggstatsplot::ggcorrmat( data = wine,  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function\n\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\n\n\n\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n\n\n\n cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix.\nThe default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\nAfter further customized:\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\nIn order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used.\n\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. \nCurrently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#overview",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. \nThe values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. \nReasons for computing a correlation matrix\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\n\n\n\nTo input into other analyses\nAs a diagnostic when checking other analyses\n\nCorrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables\nTwo main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#loading-r-packages",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "pacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#preparing-data",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#preparing-data",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "wine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-a-basic-correlation-matrix",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "pairs(wine[,1:11])\n\n\n\n\nIt uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#visualizing-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#visualizing-correlation-matrix-ggcormat",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested\n\n\nAdvantage of using ggcorrmat() over many other method to visualize a correlation matrix is its ability to provide a comprehensive and yet professional statistical report\n\nggstatsplot::ggcorrmat( data = wine,  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function\n\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-multiple-plots",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "grouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#visualizing-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#visualizing-correlation-matrix-using-corrplot-package",
    "title": "Hands-on_Ex5b",
    "section": "",
    "text": "cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix.\nThe default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\nAfter further customized:\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\nIn order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used.\n\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. \nCurrently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "title": "Hands-on_Ex_5c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring.\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\n\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n\n\n\n\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\n\nrow.names(wh) &lt;- wh$Country\n\n\n\n\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\n\n\n\n\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types.\n\n\n\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap,\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative.\nIndeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same.\nThus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm.\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. \n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#overview",
    "title": "Hands-on_Ex_5c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring.\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\n\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#data-preparation",
    "title": "Hands-on_Ex_5c",
    "section": "",
    "text": "wh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\n\nrow.names(wh) &lt;- wh$Country\n\n\n\n\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#static-heatmap",
    "title": "Hands-on_Ex_5c",
    "section": "",
    "text": "heatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types.\n\n\n\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap,\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative.\nIndeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same.\nThus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#creating-interactive-heatmap",
    "title": "Hands-on_Ex_5c",
    "section": "",
    "text": "heatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm.\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. \n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them.\nThis data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations.\n\n\n\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\n\n\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). \n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))\n\n\n\n\n\n\n\n\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js.\n\n\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#overview",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them.\nThis data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#loading-r-packages",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "pacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#data-preparation",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "wh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "ggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). \n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-method",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-method",
    "title": "Hands-on_Ex5d",
    "section": "",
    "text": "parallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js.\n\n\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\n\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "title": "Hands-on_Ex5e",
    "section": "",
    "text": "Designing treemap using R package\n\nmanipulate transaction data into a treemap structure by using selected functions provided in dplyr package\npkot static treemap using treemap package\n\n\n\n\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\n\n\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\n\n\n\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn:\n\nrectangles are coloured with different intensity of green, reflecting their respective median unit p\nThe legend reveals that the values are binned into ten binsrices.\n\n\n\n\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nSortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\nGroup by planning region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\n\ninstall.packages(\"devtools\")\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nlibrary(d3treeR)\n\n\n\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#overview",
    "title": "Hands-on_Ex5e",
    "section": "",
    "text": "Designing treemap using R package\n\nmanipulate transaction data into a treemap structure by using selected functions provided in dplyr package\npkot static treemap using treemap package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#loading-r-packages",
    "title": "Hands-on_Ex5e",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#data-wrangling",
    "title": "Hands-on_Ex5e",
    "section": "",
    "text": "realis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\n\n\n\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn:\n\nrectangles are coloured with different intensity of green, reflecting their respective median unit p\nThe legend reveals that the values are binned into ten binsrices.\n\n\n\n\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\nSortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\nGroup by planning region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on_Ex5e",
    "section": "",
    "text": "install.packages(\"devtools\")\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nlibrary(d3treeR)\n\n\n\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "plotting a calender heatmap\nplotting a cycle plot\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\n\n\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\n\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nkable() can be used to review the structure of the imported data frame\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\ntimestamp field stores date-time values in POSIXct format\nsource_country field stores the source of attack.\ntz field stores time zone of the source IP address\n\n\n\n\nStep 1: Deriving weekday and hour of dayfields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame: put the label for weekday\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nmutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nNA\n20\n\n\nAfrica/Cairo\nTW\nNA\n6\n\n\nAfrica/Cairo\nTW\nNA\n8\n\n\nAfrica/Cairo\nCN\nNA\n11\n\n\nAfrica/Cairo\nUS\nNA\n15\n\n\nAfrica/Cairo\nCA\nNA\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nObjective: Building multiple heatmaps for the top four countries with the highest number of attacks\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks,\n\ncount number of attacks by country\ncalculate the percent of attacks by country\nsave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the multiple calender heatmap\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series pattern and trend of visitor arrivals from vn programmatically\n\n\n\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n\n\n\n\n\n\n\n\n\n\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#learning-outcome",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "plotting a calender heatmap\nplotting a cycle plot\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#loading-r-package",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#loading-r-package",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-calender-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-calender-heatmap",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "For the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n\nkable() can be used to review the structure of the imported data frame\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\ntimestamp field stores date-time values in POSIXct format\nsource_country field stores the source of attack.\ntz field stores time zone of the source IP address\n\n\n\n\nStep 1: Deriving weekday and hour of dayfields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame: put the label for weekday\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nmutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nNA\n20\n\n\nAfrica/Cairo\nTW\nNA\n6\n\n\nAfrica/Cairo\nTW\nNA\n8\n\n\nAfrica/Cairo\nCN\nNA\n11\n\n\nAfrica/Cairo\nUS\nNA\n15\n\n\nAfrica/Cairo\nCA\nNA\n11\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nObjective: Building multiple heatmaps for the top four countries with the highest number of attacks\n\n\n\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks,\n\ncount number of attacks by country\ncalculate the percent of attacks by country\nsave the results in a tibble data frame\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\nStep 3: Plotting the multiple calender heatmap\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\nIn this section, you will learn how to plot a cycle plot showing the time-series pattern and trend of visitor arrivals from vn programmatically\n\n\n\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-slopegraph",
    "title": "Hands-on_Ex6",
    "section": "",
    "text": "rice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunck used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunck used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "title": "In-class Exercise 1",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\nstu_qqq &lt;-read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;-stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- \nread_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home_Ex1",
    "section": "",
    "text": "“Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families,” said OECD education director Andreas Schleicher in a BBC piece. However, the general public, however, is adamant that there are still differences between educational attainment and socioeconomic position.\nThis project will explore multiple possible factors that could help to verify and investigate the statement further, utilizing the proper R statistical graphics techniques, both interactive and static."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#loading-r-package",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#loading-r-package",
    "title": "Take-home_Ex1",
    "section": "1.1 Loading R package",
    "text": "1.1 Loading R package\nLet’s load the libraries and R package needed for this assignment using pacman::p_load() function:\n\npacman::p_load(tidyverse, haven, patchwork,ggrepel,ggthemes)\n\nThe loaded packages are:\n\ntidverse: data wrangling, tidying, reading/writing, parsing, and visualizing\nhaven: read and write various data formats used by other statistical packages\nggrepel: prevent overlapping text labels\npatchwork: preparing composite figure\nggthemes: provide extra themes, geoms, and scales"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#dataset",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#dataset",
    "title": "Take-home_Ex1",
    "section": "1.2 Dataset",
    "text": "1.2 Dataset\nThe dataset using in this assignment is taking from PISA 2022 database, called student questionnaire data file. It is uploaded as stu_qqq.\n\n1.2.1 Import the datasets\nIn terms of import dataset, there is an extra step before getting the final dataset. Since we are only interest in Singapore students’ related performance and information, a filter is applied to extract all Singapore data.\n\nstu_qqq &lt;-read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThis is the output dataset using filter () function to select all Singapore student data.\n\nstu_qqq_SG &lt;-stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- \nread_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n1.2.2 Summary Statistics of Stu_qqq_data\nThis is a summary statistics of the stu_qqq data, after using glimpse () to get a overview of basic information of the dataset (i.e., number of records, detail of variables ), applying duplicated () and is.na() to check if there is any duplicates data and missing values.\nAfter running the function, here is the results:\n\nInitial Raw Dataset OverviewData Checking\n\n\n\ndim_desc(stu_qqq_SG)\n\n[1] \"[6,606 x 1,279]\"\n\nhead(stu_qqq_SG,5)\n\n# A tibble: 5 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …\n\n\n\nObservations: 6606\nColumns: 1279\n\nThe dataset contains basic information of sudents (i.e., school ID, birth month and year), and their answer for questions under different questionnaire.\n\n\nDuplicates\n\nstu_qqq_SG[duplicated(stu_qqq_SG),]\n\n# A tibble: 0 × 1,279\n# ℹ 1,279 variables: CNT &lt;chr&gt;, CNTRYID &lt;dbl&gt;, CNTSCHID &lt;dbl&gt;, CNTSTUID &lt;dbl&gt;,\n#   CYC &lt;chr&gt;, NatCen &lt;chr&gt;, STRATUM &lt;chr&gt;, SUBNATIO &lt;chr&gt;, REGION &lt;dbl&gt;,\n#   OECD &lt;dbl&gt;, ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;, LANGTEST_COG &lt;dbl&gt;,\n#   LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;, Option_ICTQ &lt;dbl&gt;,\n#   Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;, Option_UH &lt;dbl&gt;,\n#   BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;, ST003D03T &lt;dbl&gt;,\n#   ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;, ST250Q03JA &lt;dbl&gt;, …\n\n\n\nThere is no duplicates inside the dataset\n\nMissing Values\n\nsum(is.na(stu_qqq_SG))\n\n[1] 4168500\n\n\n\nThere are 4168500 values missing, missing value are represented NA in the dataset.\nThere are significant number of missing value in the dataset, however these are spread across the dataset, not all columns that are used in EDA will contain these amount of missing value."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#select-useful-columns",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#select-useful-columns",
    "title": "Take-home_Ex1",
    "section": "2.1 Select Useful Columns",
    "text": "2.1 Select Useful Columns\nSince there are quite number of variables, it is not realistic if we analyze all the variables. Therefore, the variable select below are the ones that this assignment will focus on, using select () .\nBesides, the original variable is named in a code base and numeric way, so it is easy for people to understand and use if it is named as word. The name of variable below is after using remame() .\n\nstu_qqq_eda&lt;-stu_qqq_SG %&gt;%\n  select(CNTSCHID,CNTSTUID,ST004D01T,ST258Q01JA,PV1MATH,PV1READ, PV1SCIE,ESCS)%&gt;%\n  rename(c(Gender=\"ST004D01T\", \n           School_ID=\"CNTSCHID\", \n           Food_Availability='ST258Q01JA',\n           Student_ID='CNTSTUID',\n           Math_Score= \"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\"))\n\nStu_qqq_eda is the final dataset which will be used in this assignment with 6606 observations of 9 variables."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#change-data-types",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#change-data-types",
    "title": "Take-home_Ex1",
    "section": "2.2 Change Data Types",
    "text": "2.2 Change Data Types\nSchool_ID, Gender, Num_DigitaDevice, Food_Availability, Num_MusicalInstruments are categorized as num, but they are categorical data with different levels. Therefore, they are cast as factor type using as.factor().\n\nstu_qqq_eda$School_ID = as.factor(stu_qqq_eda$School_ID)\nstu_qqq_eda$Gender = as.factor(stu_qqq_eda$Gender)\nstu_qqq_eda$Food_Availability = as.factor(stu_qqq_eda$Food_Availability)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#recode-variable",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#recode-variable",
    "title": "Take-home_Ex1",
    "section": "2.3 Recode variable",
    "text": "2.3 Recode variable\nCurrently, “gender” variable is using “1”, “2” to represent for male and female. However, it might be not clear in the future analysis for people to quickly identify female and male. Besides, for food availability variable, to help people fast know what those option are, it is necessarily to replace the number with concise word format.\nTherefore, rename the option is important for people to get a quick understanding, using recode() function.\n\nstu_qqq_eda &lt;- stu_qqq_eda %&gt;%\n  mutate(Gender=(recode(Gender, '1'=\"Female\", '2'=\"Male\")),\n         Food_Availability=(recode(Food_Availability,\n                                   '1'='never',\n                                   '2'='once a week',\n                                   '3'='2-3 a week',\n                                   '4'='4-5 a week',\n                                   '5'='everyday')))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#final-dataset-overview",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#final-dataset-overview",
    "title": "Take-home_Ex1",
    "section": "2.4 Final dataset overview",
    "text": "2.4 Final dataset overview\n\nglimpse(stu_qqq_eda)\n\nRows: 6,606\nColumns: 8\n$ School_ID         &lt;fct&gt; 70200052, 70200134, 70200112, 70200004, 70200152, 70…\n$ Student_ID        &lt;dbl&gt; 70200001, 70200002, 70200003, 70200004, 70200005, 70…\n$ Gender            &lt;fct&gt; Female, Male, Male, Male, Female, Female, Male, Male…\n$ Food_Availability &lt;fct&gt; never, never, never, everyday, never, never, never, …\n$ Math_Score        &lt;dbl&gt; 639.004, 697.191, 693.710, 427.317, 436.462, 569.982…\n$ Reading_Score     &lt;dbl&gt; 676.298, 625.585, 620.116, 381.495, 448.199, 469.441…\n$ Science_Score     &lt;dbl&gt; 710.634, 670.646, 666.095, 340.308, 456.333, 475.158…\n$ ESCS              &lt;dbl&gt; 0.1836, 0.8261, -1.0357, -0.9606, 0.0856, 0.1268, -0…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#students-performance-distribution",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#students-performance-distribution",
    "title": "Take-home_Ex1",
    "section": "3.1 Students Performance Distribution",
    "text": "3.1 Students Performance Distribution\nHistogram are used to show the frequency distribution for numerical data. geom_histogram() function in ggplot is applied to draw the graph.\n\nMath\n\n\nShow code\np1&lt;- ggplot(data=stu_qqq_eda, \n       aes(x=Math_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#FFC0CB') +\n  labs(x= \"Math_Score\",\n       y=\"No.of students\",\n       title= \"Distribution of Student Math Performance\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Math_Score, na.rm = T)), \n             color=\"#595DE5\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=675, \n           y=100, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Math_Score, na.rm = T), 3)), \n           color= \"#595DE5\", \n           size=3.5) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Math_Score, na.rm = T)),\n             colour=\"red\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=500,\n           y=100,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Math_Score, na.rm = T), 3)),\n           color=\"red\",\n           size=3.5) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nReading\n\n\nShow code\np2&lt;- ggplot(data=stu_qqq_eda, \n       aes(x=Reading_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#FFC0CB') +\n  labs(x= \"Reading_Score\",\n       y=\"No.of students\",\n       title= \"Distribution of Student Reading Performance\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Reading_Score, na.rm = T)), \n             color=\"#595DE5\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=100, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Reading_Score, na.rm = T), 3)), \n           color= \"#595DE5\", \n           size=3.5) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Reading_Score, na.rm = T)),\n             colour=\"red\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=460,\n           y=100,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Reading_Score, na.rm = T), 3)),\n           color=\"red\",\n           size=3.5) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nScience\n\n\nShow code\np3&lt;- ggplot(data=stu_qqq_eda, \n       aes(x=Science_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#FFC0CB') +\n  labs(x= \"Science_Score\",\n       y=\"No.of students\",\n       title= \"Distribution of Student Science Performance\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Science_Score, na.rm = T)), \n             color=\"#595DE5\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=100, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Science_Score, na.rm = T), 3)), \n           color= \"#595DE5\", \n           size=3.5) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Science_Score, na.rm = T)),\n             colour=\"red\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=480,\n           y=100,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Science_Score, na.rm = T), 3)),\n           color=\"red\",\n           size=3.5) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nPlot\n\np1/p2/p3\n\n\n\n\nFrom the histogram show above, students’ math, reading, and science demonstrated a normal distribution with a similar mean and median score across this three subjects. More than half of the students’ score is in the range from 500-600."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#are-there-difference-in-student-performance-between-gender",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#are-there-difference-in-student-performance-between-gender",
    "title": "Take-home_Ex1",
    "section": "3.2 Are there difference in student performance between gender ?",
    "text": "3.2 Are there difference in student performance between gender ?\n\nDistribution\nThe first EDA is to explore the difference in students’ performance between male and female.\nFrom the bar chart below shows that number of students between male and female have no significant difference. There are around 3500 students for male and female.\n\nggplot(data = stu_qqq_eda,\n       aes(x = Gender)) +\n  geom_bar()\n\n\n\n\nMoving on to the analysis part, the idea of choosing histogram is that it can clearly show performance distribution among every range of score. In order to compare between gender clearly, using scale_fill_manual() function to construct the histogram together with male and female.\n\nMathReadingScience\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Math_Score,\n           fill = Gender)) +\n  geom_histogram(bins = 10,\n                 position= \"dodge\",\n                 color=\"grey10\") +\n  scale_fill_manual(values = c(\"#F98B88\", \"#F5FFFA\")) +\n  scale_y_continuous(breaks = seq(0, 3200, by = 500)) +\n  scale_x_continuous(breaks = seq(0, 1000, by = 100)) +\n  ylim(c(0,1000)) +\n  stat_bin(bins = 10,\n           geom = \"text\",\n           aes(label = after_stat(count)),\n           vjust = -.5, size=2.5,\n           position = position_dodge())\n\n\n\n\n\nBased on the histogram output, we can see that both male and female represent normal distribution and there is no obvious difference on math score across every bin.\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Reading_Score,\n           fill = Gender)) +\n  geom_histogram(bins = 10,\n                 position= \"dodge\",\n                 color=\"grey10\") +\n  scale_fill_manual(values = c(\"#F98B88\", \"#F5FFFA\")) +\n  scale_y_continuous(breaks = seq(0, 3200, by = 500)) +\n  scale_x_continuous(breaks = seq(0, 1000, by = 100)) +\n  ylim(c(0,1000)) +\n  stat_bin(bins = 10,\n           geom = \"text\",\n           aes(label = after_stat(count)),\n           vjust = -.5, size= 2.5,\n           position = position_dodge())\n\n\n\n\n\nBased on the histogram output, we can see that both male and female represent normal distribution and there is no obvious difference on reading score across every bin.\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x= Science_Score,\n           fill = Gender)) +\n  geom_histogram(bins = 10,\n                 position= \"dodge\",\n                 color=\"grey10\") +\n  scale_fill_manual(values = c(\"#F98B88\", \"#F5FFFA\")) +\n  scale_y_continuous(breaks = seq(0, 3200, by = 500)) +\n  scale_x_continuous(breaks = seq(0, 1000, by = 100)) +\n  ylim(c(0,1000)) +\n  stat_bin(bins = 10,\n           geom = \"text\",\n           aes(label = after_stat(count)),\n           vjust = -.5, size= 2.5,\n           position = position_dodge())\n\n\n\n\n\nBased on the histogram output, we can see that both male and female represent normal distribution and Males’ science score slightly higher than females’. Overall, there is no dramatic difference of science score between gender.\n\n\n\nIn conclusion, after observing the histogram among the three subjects and gender. There seems no significant difference on student’s academic performance between male and female."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#are-there-difference-in-student-performance-among-various-schools",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#are-there-difference-in-student-performance-among-various-schools",
    "title": "Take-home_Ex1",
    "section": "3.3 Are there difference in student performance among various schools?",
    "text": "3.3 Are there difference in student performance among various schools?\nThis EDA is to explore the difference in students’ performance among various school. Before plotting, the average of students’ score is calculated using mean () function for a overall demonstration among schools.\n\nstu_avg_score &lt;- stu_qqq_eda %&gt;%\n  group_by(School_ID) %&gt;%\n  mutate(math_avg = mean(Math_Score),\n         science_avg = mean(Science_Score),\n         reading_avg = mean(Reading_Score)) %&gt;%\n  select(School_ID, math_avg, science_avg, reading_avg) %&gt;%\n  unique() \n\n\nMathScienceReading\n\n\n\nggplot(data=stu_avg_score,\n       aes(x= math_avg)) +\n  geom_boxplot(width=0.1) +\n  geom_point(aes(y= -0.1), position= position_jitter(width = 0.1, height = 0), color = \"red\", alpha = 0.5) +\n  ylim(c(-.1,.1)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n  labs(x= \"Math Average among schools\", y= NULL)\n\n$x\n[1] \"Math Average among schools\"\n\n$y\nNULL\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nFrom the graph above, it shows that the score spread across from 400 to 800, which means that the variance is large. Therefore, it indicated that the difference of schools make a contribution towords students’ math score performance.\n\n\n\nggplot(data=stu_avg_score,\n       aes(x= science_avg)) +\n  geom_boxplot(width=0.1) +\n  geom_point(aes(y= -0.1), position= position_jitter(width = 0.1, height = 0), color = \"red\", alpha = 0.5) +\n  ylim(c(-.1,.1)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n  labs(x= \"Science Average among schools\", y= NULL)\n\n$x\n[1] \"Science Average among schools\"\n\n$y\nNULL\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nFrom the graph above, it shows that the score spread across from 350 to 750 which means that the variance is large. Therefore, it indicated that the difference of schools make a contribution towards students’ science score performance.\n\n\n\nggplot(data=stu_avg_score,\n       aes(x= reading_avg)) +\n  geom_boxplot(width=0.1) +\n  geom_point(aes(y= -0.1), position= position_jitter(width = 0.1, height = 0), color = \"red\", alpha = 0.5) +\n  ylim(c(-.1,.1)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n  labs(x= \"Reading Average among schools\", y= NULL)\n\n$x\n[1] \"Reading Average among schools\"\n\n$y\nNULL\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nFrom the graph above, it shows that the score spread across from 300 to 700, which means that the variance is large. Therefore, it indicated that the difference of schools make a contribution to students’ reading score performance.\n\n\n\nIn conclusion, from the output of score performance and schools, it generally demonstrated that school have a possibility to be an indicator to students’ academic performance."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#socioeconomic-status",
    "title": "Take-home_Ex1",
    "section": "3.4 Socioeconomic Status",
    "text": "3.4 Socioeconomic Status\nIn this section, the main focus is related to students’ socioeconomic status. Before go into the specific variable, lets first have a look to the distribution of their socioeconomic status\n\nDistribution of SocialEconomic Status Score\n\nggplot(data=stu_qqq_eda, \n       aes(x=ESCS)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#FFC0CB') +\n  labs(x= \"Socioeconomic status\",\n       y=\"No.of students\",\n       title= \"Distribution of Socioeconomic Performance\") +\ngeom_vline(aes(xintercept=median(stu_qqq_eda$ESCS, na.rm = T)), \n             color=\"#595DE5\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=1.5, \n           y=100, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$ESCS, na.rm = T), 3)), \n           color= \"#595DE5\", \n           size=3.5) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$ESCS, na.rm = T)),\n             colour=\"red\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=-0.5,\n           y=100,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$ESCS, na.rm = T), 3)),\n           color=\"red\",\n           size=3.5) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\nFrom the histogram above, it demonstrated that the range of socioeconomic status is from -4 to 3.5 and it is slightly skewed to the right side."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#student-performance-and-socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#student-performance-and-socioeconomic-status",
    "title": "Take-home_Ex1",
    "section": "3.4.1 Student performance and socioeconomic status",
    "text": "3.4.1 Student performance and socioeconomic status\nIn this EDA, it will show the relationship between student academic score and socioeconomic status score using scatter plot with cor() function.\n\nMathReadingScience\n\n\n\ncor_Math &lt;- round(cor(stu_qqq_eda$Math_Score, stu_qqq_eda$ESCS, use = \"complete.obs\"), 2)\n\nggplot(data = stu_qqq_eda,\n       aes(y = Math_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Math), color = 'green')\n\n\n\n\nFrom the graph showing above, it shows that there is moderate positive relationship between students’ math score and their socioeconomic status score. It indicated that if the students have higher socioeconomic status score, they will more likely to have a higher math score.\n\n\n\ncor_Reading &lt;- round(cor(stu_qqq_eda$Reading_Score, stu_qqq_eda$ESCS, use = \"complete.obs\"), 2)\n\nggplot(data = stu_qqq_eda,\n       aes(y = Reading_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Reading), color = 'green')\n\n\n\n\nFrom the graph showing above, it shows that there is moderate positive relationship between students’ reading score and their socioeconomic status score. It indicated that if the students have higher socioeconomic status score, they will more likely to have a higher reading score.\n\n\n\ncor_Science &lt;- round(cor(stu_qqq_eda$Science_Score, stu_qqq_eda$ESCS, use = \"complete.obs\"), 2)\n\nggplot(data = stu_qqq_eda,\n       aes(y = Science_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Science), color = 'green')\n\n\n\n\nFrom the graph showing above, it shows that there is moderate positive relationship between students’ science score and their socioeconomic status score. It indicated that if the students have higher socioeconomic status score, they will more likely to have a higher science score.\n\n\n\nIn conclusion, from all three scatter plot, a consistent pattern can be observed from the three subject with moderate positive relationship. It demonstrated that higher socioeconomic status indicated the better academic performance."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#will-food-availability-affect-student-performance",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#will-food-availability-affect-student-performance",
    "title": "Take-home_Ex1",
    "section": "3.4.2 Will food availability affect student performance ?",
    "text": "3.4.2 Will food availability affect student performance ?\nIn this EDA, it will show the difference of students’ academic performance on the degree of food availability.\nHere is a distributions of food availability:\n\nDistributions\n\nggplot(data = stu_qqq_eda,\n       aes(x = Food_Availability)) +\n  geom_bar()\n\n\n\n\nFrom the bar graph above, we can see that most of the students don’t have concern of food availability.\ndrop_na() function is applied to remove NA data which is not useful in the analysis\n\ncleaned_stu_qqq_eda &lt;- stu_qqq_eda %&gt;%\n  select(Math_Score, Science_Score, Reading_Score, Food_Availability) %&gt;%\n  drop_na()\n\n\nMathReadingScience\n\n\n\nggplot(data = cleaned_stu_qqq_eda, aes(x = factor(Food_Availability), y = Math_Score)) +\n  geom_violin() +\n  labs(x = \"Degree of Food Concern\", y = \"Math Score\") +\n  ggtitle(\"Distribution of Math Scores for Each level of Food Availability\") +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"blue\")\n\n\n\n\nFrom the violin graph above, the mean of math score among different degree of food concern frequency is reducing from never to everyday. It indicated that a student who have higher math score more likely to have less food availability concern.\n\n\n\nggplot(data = cleaned_stu_qqq_eda, aes(x = factor(Food_Availability), y = Reading_Score)) +\n  geom_violin() +\n  labs(x = \"Degree of Food Concern\", y = \"Reading Score\") +\n  ggtitle(\"Distribution of Reading Scores for Each level of Food Availability\") +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"blue\")\n\n\n\n\nFrom the violin graph above, the mean of reading score among different degree of food concern frequency is reducing from never to everyday. It indicated that a student who have higher reading score more likely to have less food availability concern.\n\n\n\nggplot(data = cleaned_stu_qqq_eda, aes(x = factor(Food_Availability), y = Science_Score)) +\n  geom_violin() +\n  labs(x = \"Degree of Food Concern\", y = \"Science Score\") +\n  ggtitle(\"Distribution of Science Scores for Each level of Food Availability\") +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"blue\")\n\n\n\n\nFrom the violin graph above, the mean of science score among different degree of food concern frequency is reducing from never to everyday. It indicated that a student who have higher science score more likely to have less food availability concern."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home_Ex2",
    "section": "",
    "text": "I selected a classmate’s Take-home Exercise 1 contribution for this Take-home Exercise 2 and evaluated the charts for clarity and aesthetic. Additionally, the original design was recreated utilizing the best practices and data visualization techniques covered in the first two lectures."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#loading-r-package",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#loading-r-package",
    "title": "Take-home_Ex2",
    "section": "2.1 Loading R package",
    "text": "2.1 Loading R package\nLet’s load the libraries and R package needed for this assignment using pacman::p_load()function:\n\npacman::p_load(tidyverse, haven, patchwork,ggrepel,ggthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-data",
    "title": "Take-home_Ex2",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nThe code chunk below uses ‘read_sas()’ of ‘haven’ to import PISA data into R environment.\n\nstu_qqq &lt;-read_sas(\"data/cy08msp_stu_qqq.sas7bdat\") \n\n\nstu_qqq_SG &lt;-stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;-  \nread_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design",
    "title": "Take-home_Ex2",
    "section": "3.1 Original Design",
    "text": "3.1 Original Design\nThe original design is shown below\n\nUsage of Histogram is reasonable and appropriate as it fulfill the objectives of demonstrating the distribution of math, reading, and science score. However, this chart can be improved in following criteria."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity",
    "title": "Take-home_Ex2",
    "section": "3.2 Clarity",
    "text": "3.2 Clarity"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-graph-title",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-graph-title",
    "title": "Take-home_Ex2",
    "section": "(a) Graph Title",
    "text": "(a) Graph Title\nThe title is concise and can reflect the content of histogram. However, it might be not clear and straightforward enough for people have a fast understanding when they read it since there is words that shows certain level of conjecture."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling",
    "title": "Take-home_Ex2",
    "section": "(b) Axes Labeling",
    "text": "(b) Axes Labeling\nIt is sometimes the case that column names like PVmath and y will not make sense to users while viewing the charts, thus new axes labels can be added to graphs instead of utilizing the same name as the columns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics",
    "title": "Take-home_Ex2",
    "section": "3.3 Aesthetics",
    "text": "3.3 Aesthetics"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-title",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-title",
    "title": "Take-home_Ex2",
    "section": "(a) Redundant title",
    "text": "(a) Redundant title\nSince the name of the x-axis already can represent the content of the graph, it is not necessary to add the sub-title."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-gridlines-vertical",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-gridlines-vertical",
    "title": "Take-home_Ex2",
    "section": "(b) Gridlines-Vertical",
    "text": "(b) Gridlines-Vertical\nSince the original graph already marked down the max, min, and mean value, besides the tick marks already marked on the x-axis, it is not necessary to have the vertical gridline."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design",
    "title": "Take-home_Ex2",
    "section": "3.4 Sketch of Proposed Design",
    "text": "3.4 Sketch of Proposed Design\nRough sketch of proposed design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design",
    "title": "Take-home_Ex2",
    "section": "3.5 Final Design",
    "text": "3.5 Final Design\nAfter conduct the changes list above, here is the final design:\n\nData preparationVisualization\n\n\n\n#Rename the variable \n#| code-fold: true\n#| code-summary: “Show the code”\n\nstu_qqq_1&lt;-stu_qqq_SG %&gt;%\n  select(PV1MATH,PV1READ, PV1SCIE)%&gt;%\n  rename(c(Math_Score= \"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\"))\n\n\n\n\n\n“Show the code”\nmaths_mean &lt;- mean(stu_qqq_1$Math_Score)\nmaths_min &lt;- min(stu_qqq_1$Math_Score)\nmaths_max &lt;- max(stu_qqq_1$Math_Score)\n\nread_mean &lt;- mean(stu_qqq_1$Reading_Score)\nread_min &lt;- min(stu_qqq_1$Reading_Score)\nread_max &lt;- max(stu_qqq_1$Reading_Score)\n\nscience_mean &lt;- mean(stu_qqq_1$Science_Score)\nscience_min &lt;- min(stu_qqq_1$Science_Score)\nscience_max &lt;- max(stu_qqq_1$Science_Score)\n\n\nhist_maths &lt;- ggplot(data = stu_qqq_1,\n             aes(x = Math_Score)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"chartreuse3\",\n                 fill = \"lightgreen\") +\n  geom_vline(aes(xintercept = maths_mean),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = maths_min),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = maths_max),\n             color = \"darkgreen\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = maths_mean, y = 1100,label = paste(\"Mean=\", round(maths_mean, 1)), size = 3, color = \"darkgreen\") +\n  annotate(\"text\", x = maths_min, y = 1000,label = paste(\"Min=\", round(maths_min, 1)), size = 3, color = \"darkgreen\") +\n  annotate(\"text\", x = maths_max - 50, y = 1000,label = paste(\"Max=\", round(maths_max, 1)), size = 3, color = \"darkgreen\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank()) +\n  scale_y_continuous(\"No. of Students\")\n\nhist_read &lt;- ggplot(data = stu_qqq_1,\n             aes(x = Reading_Score)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"blue\",\n                 fill = \"lightblue\") +\n  geom_vline(aes(xintercept = read_mean),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = read_min),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = read_max),\n             color = \"darkblue\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = read_mean, y = 1100,label = paste(\"Mean=\", round(read_mean, 1)), size = 3, color = \"darkblue\") +\n  annotate(\"text\", x = read_min + 50, y = 1000,label = paste(\"Min=\", round(read_min, 1)), size = 3, color = \"darkblue\") +\n  annotate(\"text\", x = read_max - 50, y = 1000,label = paste(\"Max=\", round(read_max, 1)), size = 3, color = \"darkblue\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\nhist_science &lt;- ggplot(data = stu_qqq_1,\n             aes(x = Science_Score)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"red\",\n                 fill = \"pink\") +\n  geom_vline(aes(xintercept = science_mean),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = science_min),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  geom_vline(aes(xintercept = science_max),\n             color = \"darkred\",\n             linetype = \"dashed\") +\n  annotate(\"text\", x = science_mean, y = 1100,label = paste(\"Mean=\", round(science_mean, 1)), size = 3, color = \"darkred\") +\n  annotate(\"text\", x = science_min + 50, y = 1000,label = paste(\"Min=\", round(science_min, 1)), size = 3, color = \"darkred\") +\n  annotate(\"text\", x = science_max - 50, y = 1000,label = paste(\"Max=\", round(science_max, 1)), size = 3, color = \"darkred\") +\n  coord_cartesian(xlim = c(0, 1100),\n                  ylim = c(0, 1100)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\nhist_maths + hist_read + hist_science +\n  plot_annotation(\"Distribution of Plausible Values for Each Subject\",\ntheme = theme(plot.title = element_text(hjust = 0.5)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-1",
    "title": "Take-home_Ex2",
    "section": "4.1 Original Design",
    "text": "4.1 Original Design\nThe original design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-1",
    "title": "Take-home_Ex2",
    "section": "4.2 Clarity",
    "text": "4.2 Clarity"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-plot--violin-boxplot",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-plot--violin-boxplot",
    "title": "Take-home_Ex2",
    "section": "(a) Redundant plot- violin + boxplot",
    "text": "(a) Redundant plot- violin + boxplot\nIn this raincloud plot, it demonstrate the probability density and key summary statistics in a diverse format which including scatter, boxplot, and density. For this case, the objective is to see if there is difference on academic performance between genders. From looking this chart, it might confuse readers where to start from, so they could not able to get a fast conclusion. Therefore, a combination of a violin and a boxplot maybe can help to generate a clearer visualization."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-1",
    "title": "Take-home_Ex2",
    "section": "(b) Axes Labeling",
    "text": "(b) Axes Labeling\nIt is sometimes the case that column names like PVmath and y will not make sense to users while viewing the charts, thus new axes labels can be added to graphs instead of utilizing the same name as the columns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#c-mean-score-presentation",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#c-mean-score-presentation",
    "title": "Take-home_Ex2",
    "section": "(c) Mean score presentation",
    "text": "(c) Mean score presentation\nInstead of only line without specific number, it will be more clear to readers after put the specific score for mean."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-1",
    "title": "Take-home_Ex2",
    "section": "4.3 Aesthetics",
    "text": "4.3 Aesthetics"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-change-of-layout",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-change-of-layout",
    "title": "Take-home_Ex2",
    "section": "(a) Change of layout",
    "text": "(a) Change of layout\nA vertical layout of the boxplot to compare the mean of scores could be better fit readers’ habits."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-1",
    "title": "Take-home_Ex2",
    "section": "4.4 Sketch of Proposed Design",
    "text": "4.4 Sketch of Proposed Design\nRough sketch of proposed design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-1",
    "title": "Take-home_Ex2",
    "section": "4.5 Final Design",
    "text": "4.5 Final Design\nAfter conduct the changes list above, here is the final design:\n\nData preparationVisualization\n\n\n\n#Rename the variable \n#| code-fold: true\n#| code-summary: “Show the code”\n\n\nstu_qqq_2&lt;-stu_qqq_SG %&gt;%\n  select(PV1MATH,PV1READ, PV1SCIE, ST004D01T)%&gt;%\n  rename(c(Math_Score= \"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\",\n           Gender = \"ST004D01T\"))%&gt;%\n  mutate(Gender = recode(Gender, \n                         \"1\" = \"Female\", \n                         \"2\" = \"Male\"))\n#Change data type\nstu_qqq_2$Gender &lt;- as.factor(stu_qqq_2$Gender)\n\n\n\n\ngendermath &lt;- ggplot(data = stu_qqq_2,\n       aes(x = Gender,\n           y = Math_Score)) +\n  geom_violin() +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"black\",          \n             size = 2) +\n  labs(x = \"Math's Score\") +\n  scale_y_continuous(\"Score\", breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\n\ngenderreading &lt;- ggplot(data = stu_qqq_2,\n       aes(x = Gender,\n           y = Reading_Score)) +\n  geom_violin() +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"black\",          \n             size = 2) +\n  labs(x = \"Reading's Score\") +\n  scale_y_continuous(NULL, breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\n\ngenderscience &lt;- ggplot(data = stu_qqq_2,\n       aes(x = Gender,\n           y = Science_Score)) +\n  geom_violin() +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"black\",          \n             size = 2) +\n  labs(x = \"Science's Score\") +\n  scale_y_continuous(NULL, breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\ngendermath+genderreading+genderscience+ plot_annotation(\n  title = 'Students\\' academic Performance between Gender',\n  theme = theme(plot.title = element_text(hjust = 0.6))\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-2",
    "title": "Take-home_Ex2",
    "section": "5.1 Original Design",
    "text": "5.1 Original Design\nThe original design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-2",
    "title": "Take-home_Ex2",
    "section": "5.2 Clarity",
    "text": "5.2 Clarity"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-alternative-chart-type-for-better-presentation",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-alternative-chart-type-for-better-presentation",
    "title": "Take-home_Ex2",
    "section": "(a) Alternative chart type for better presentation",
    "text": "(a) Alternative chart type for better presentation\nCurrent chart type it’s inappropriate in this question, since heatmap it’s specifically build for categorical data. In this case, Student’s score it’s a continuous data and the number of school ID its too many to visualize in a clear and straightforward way. Bar chart might can consider to use after recode students’s performance score into different score range which is categorical data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-2",
    "title": "Take-home_Ex2",
    "section": "(b) Axes Labeling",
    "text": "(b) Axes Labeling\nIt is sometimes the case that column names like PVmath and y will not make sense to users while viewing the charts, thus new axes labels can be added to graphs instead of utilizing the same name as the columns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-2",
    "title": "Take-home_Ex2",
    "section": "5.3 Aesthetics",
    "text": "5.3 Aesthetics"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-title-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-redundant-title-1",
    "title": "Take-home_Ex2",
    "section": "(a) Redundant title",
    "text": "(a) Redundant title\nSince the name of the x-axis already can represent the content of the graph, it is not necessary to add the sub-title."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-gridlines-vertical-1",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-gridlines-vertical-1",
    "title": "Take-home_Ex2",
    "section": "(b) Gridlines-Vertical",
    "text": "(b) Gridlines-Vertical\nSince the original graph already marked down the max, min, and mean value, besides the tick marks already marked on the x-axis, it is not necessary to have the vertical gridline."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-2",
    "title": "Take-home_Ex2",
    "section": "5.4 Sketch of Proposed Design",
    "text": "5.4 Sketch of Proposed Design\nRough sketch of proposed design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-2",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-2",
    "title": "Take-home_Ex2",
    "section": "5.5 Final Design",
    "text": "5.5 Final Design\nAfter conduct the changes list above, here is the final design:\n\nData PreparationVisualization\n\n\n\n\n“Show the code”\n# Rename the variable\nstu_qqq_3&lt;-stu_qqq_SG %&gt;%\n  select(PV1MATH,PV1READ, PV1SCIE, CNTSCHID)%&gt;%\n  rename(c(Math_Score= \"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\",\n           School_ID = \"CNTSCHID\"))\n#Remove NA value & Calculate average group by school_ID\nstu_qqq_3_NO_NA &lt;- stu_qqq_3 %&gt;%\n  select(Math_Score, Science_Score, Reading_Score, School_ID) %&gt;%\n  drop_na()\nstu_avg_score &lt;- stu_qqq_3_NO_NA %&gt;%\n  group_by(School_ID) %&gt;%\n  mutate(math_avg = mean(Math_Score),\n         science_avg = mean(Science_Score),\n         reading_avg = mean(Reading_Score)) %&gt;%\n  select(School_ID, math_avg, science_avg, reading_avg) %&gt;%\n  unique() \n\n#Check range of value in the dataset\nsummary(stu_avg_score$math_avg)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  392.8   530.7   562.6   570.1   596.0   742.8 \n\n\n“Show the code”\nsummary(stu_avg_score$science_avg)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  378.7   522.6   550.7   557.1   580.8   727.3 \n\n\n“Show the code”\nsummary(stu_avg_score$reading_avg)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  328.2   501.8   536.5   540.9   565.2   680.3 \n\n\n“Show the code”\n#Recode score range \nstu_qqq_3.1 &lt;- stu_avg_score %&gt;%\n  mutate(Math_Score_Range = cut(math_avg, \n                                breaks = c(300, 400, 500, 600, 700, 800), \n                                labels = c(\"300-400\", \"401-500\", \"501-600\", \n                                           \"601-700\", \"701-800\"),\n                                include.lowest = TRUE),\n         Science_Score_Range = cut(science_avg, \n                                breaks = c(300, 400, 500, 600, 700, 800), \n                                labels = c(\"300-400\", \"401-500\", \"501-600\", \n                                           \"601-700\", \"701-800\"),\n                                include.lowest = TRUE),\n         Reading_Score_Range = cut(reading_avg, \n                                breaks = c(300, 400, 500, 600, 700, 800), \n                                labels = c(\"300-400\", \"401-500\", \"501-600\", \n                                           \"601-700\", \"701-800\"),\n                                include.lowest = TRUE))\n\n\n\n\n\n\n“Show the code”\np1&lt;-ggplot(data = stu_qqq_3.1,\n       aes(x = Math_Score_Range)) +\n  geom_bar(width = 0.5,\n           color = \"grey30\",\n           fill = \"purple\")+\n  scale_y_continuous(\"number of school\", limits = c(0,125), breaks = seq(0,125,25)) +\n  theme(axis.text.x = element_text(size = 6.5),\n        panel.grid.major = element_line(color = 'black'),\n        panel.grid.minor = element_line(color = 'gray20'),\n        panel.grid.major.x = element_blank(),\n        panel.background = element_rect(fill = 'white')) \n\np2&lt;-ggplot(data = stu_qqq_3.1,\n       aes(x = Science_Score_Range)) +\n  geom_bar(width = 0.5,\n           color = \"grey30\",\n           fill = \"purple\") +\n  scale_y_continuous(NULL, limits = c(0,125), breaks = seq(0,125,25)) +\n  theme(axis.text.x = element_text(size = 6.5),\n        panel.grid.major = element_line(color = 'black'),\n        panel.grid.minor = element_line(color = 'gray20'),\n        panel.grid.major.x = element_blank(),\n        panel.background = element_rect(fill = 'white')) \n\np3&lt;-ggplot(data = stu_qqq_3.1,\n       aes(x = Reading_Score_Range)) +\n  geom_bar(width = 0.5,\n           color = \"grey30\",\n           fill = \"purple\")+\n  scale_y_continuous(NULL, limits = c(0,125), breaks = seq(0,125,25)) +\n  theme(axis.text.x = element_text(size = 6.5),\n        panel.grid.major = element_line(color = 'black'),\n        panel.grid.minor = element_line(color = 'gray20'),\n        panel.grid.major.x = element_blank(),\n        panel.background = element_rect(fill = 'white')) \n\np1+p2+p3+plot_annotation(\n  title = \"Difference of academic perfomance among schools\",\n  theme = theme(plot.title = element_text(hjust = 0.6))\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#original-design-3",
    "title": "Take-home_Ex2",
    "section": "6.1 Original Design",
    "text": "6.1 Original Design"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#clarity-3",
    "title": "Take-home_Ex2",
    "section": "6.2 Clarity",
    "text": "6.2 Clarity"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-display-position-of-r-square",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-display-position-of-r-square",
    "title": "Take-home_Ex2",
    "section": "(a) Display position of R square",
    "text": "(a) Display position of R square\nSince the R square represent the strength of the correlation, the position of the R square could be move to next to the linear line for reader to get a quick view of the statistic of the scatter plot to understand the strength."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#b-axes-labeling-3",
    "title": "Take-home_Ex2",
    "section": "(b) Axes Labeling",
    "text": "(b) Axes Labeling\nIt is sometimes the case that column names like PVmath and ESCS will not make sense to users while viewing the charts, thus new axes labels can be added to graphs instead of utilizing the same name as the columns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#aesthetics-3",
    "title": "Take-home_Ex2",
    "section": "6.3 Aesthetics",
    "text": "6.3 Aesthetics"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-make-correlation-line-more-pronounce",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#a-make-correlation-line-more-pronounce",
    "title": "Take-home_Ex2",
    "section": "(a) Make correlation line more pronounce",
    "text": "(a) Make correlation line more pronounce\nFor the reading score and social economic status score, the correlation line is having difficulty to read. Therefore, making the line thicker could solve the problem."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#sketch-of-proposed-design-3",
    "title": "Take-home_Ex2",
    "section": "6.4 Sketch of Proposed Design",
    "text": "6.4 Sketch of Proposed Design\nRough sketch of proposed design is shown below"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-3",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#final-design-3",
    "title": "Take-home_Ex2",
    "section": "6.5 Final Design",
    "text": "6.5 Final Design\nAfter conduct the changes list above, here is the final design:\n\nData PreparationVisualization\n\n\n\n\n“Show the code”\n# Rename the variable\nstu_qqq_4&lt;-stu_qqq_SG %&gt;%\n  select(PV1MATH,PV1READ, PV1SCIE,ESCS)%&gt;%\n  rename(c(Math_Score= \"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\"))\n\n\n\n\n\n\n“Show the code”\ncor_Math &lt;- round(cor(stu_qqq_4$Math_Score, stu_qqq_4$ESCS, use = \"complete.obs\"), 2)\ncor_Reading &lt;- round(cor(stu_qqq_4$Reading_Score, stu_qqq_4$ESCS, use = \"complete.obs\"), 2)\ncor_Science &lt;- round(cor(stu_qqq_4$Science_Score, stu_qqq_4$ESCS, use = \"complete.obs\"), 2)\n\n\np1&lt;-ggplot(data = stu_qqq_4,\n       aes(y = Math_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Math), color = 'green')+\n  ylim(c(0,900))+\n  labs(x = NULL) +\n  ggtitle(\"Relationship between Students' academic and socioeconomic status\")+\n  theme(plot.title = element_text(hjust = 0.5)) +\n  theme_minimal()\n\np2&lt;-ggplot(data = stu_qqq_4,\n       aes(y = Reading_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Reading), color = 'green')+\n  ylim(c(0,900))+\n  labs(x =NULL)+\n  theme_minimal()\n\np3&lt;-ggplot(data = stu_qqq_4,\n       aes(y = Science_Score, x = ESCS)) +\n  geom_point(size = 1)+\n  geom_smooth(method = lm) + \n  annotate(\"text\", x=0, y=500, label=paste0(\"r = \", cor_Science), color = 'green')+\n  ylim(c(0,900))+\n  labs(x = \"socioeconomic status score\")+\n  theme_minimal()\n\ncombined_plot &lt;- p1/p2/p3\n\ncombined_plot &lt;- combined_plot + plot_layout(heights = c(9,9,9))\n\ncombined_plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "title": "Take-home_Ex3",
    "section": "",
    "text": "An increase of daily mean temperature\nThe temperature difference between wet and dry month is predicted to increase"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#loading-r-package",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#loading-r-package",
    "title": "Take-home_Ex3",
    "section": "3.1 Loading R package",
    "text": "3.1 Loading R package\nLet’s load the libraries and R package needed for this assignment using pacman::p_load() function:\n\npacman::p_load(tidyverse, ggthemes, CGPfunctions, plotly, ggdist)\n\nThe loaded packages are:\n\ntidverse: data wrangling, tidying, reading/writing, parsing, and visualizing"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#dataset",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#dataset",
    "title": "Take-home_Ex3",
    "section": "3.2 Dataset",
    "text": "3.2 Dataset\nThe dataset using in this assignment is taking from historical daily temperature or rainfall data in Meteorological service Singapore website.\n\n3.2.1 Import the datasets\nIn this assignment, we will using data of daily temperature in Changi region from July of 1983, 1993, 2003, 2013, to 2023.\n\nperiod1&lt;-read_csv(\"data/DAILYDATA_S24_202307.csv\")\n\n\nperiod2&lt;-read_csv(\"data/DAILYDATA_S24_201307.csv\")\n\n\nperiod3&lt;-read_csv(\"data/DAILYDATA_S24_200307.csv\")\n\n\nperiod4&lt;-read_csv(\"data/DAILYDATA_S24_199307.csv\")\n\n\nperiod5&lt;-read_csv(\"data/DAILYDATA_S24_198307.csv\")\n\n\n\n3.2.2 Combine the datasets into one\n\nweather &lt;- rbind(period1,period2,period3,period4,period5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualization-using-calendar-heatmap",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualization-using-calendar-heatmap",
    "title": "Take-home_Ex3",
    "section": "5.1 Visualization Using Calendar Heatmap",
    "text": "5.1 Visualization Using Calendar Heatmap\n\n# change variable name and columns type into factor\nweather$Year &lt;- as.factor(weather$Year)\nweather$Day &lt;- as.factor(weather$Day)\nweather &lt;- weather %&gt;%\n  mutate(mean_temp = `Mean Temperature (°C)`)\n\n\n# Graphing the calendar heatmap\np &lt;- ggplot(weather, \n           aes(Day, \n               Year, \n               fill = mean_temp)) + \n    geom_tile(color = \"white\") + \n    theme_tufte(base_family = \"Helvetica\") + \n    scale_fill_gradient(name = \"°C \",\n                        low = \"light yellow\", \n                        high = \"dark red\") +\n    labs(x = NULL, \n         y = NULL, \n         title = \"Mean Temperture by day and year in month of July\") +\n    theme(axis.ticks = element_blank(),\n          plot.title = element_text(hjust = 0.5),\n          legend.title = element_text(size = 8),\n          legend.text = element_text(size = 6) )\n\nggplotly(p)\n\n\n\n\n\nIn this graph, the depth of the color represent the degree of temperature. In this graph, red means high temperature which means 30 degree and low temperature is represented by yellow. The gradient demonstrated the change of the temperature across different years and different days within one month in that year.\n\nThis graph can help user to identify the change of the temperature with in one month in certain year and also the comparison of same day across different 5 years."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualization-using-cycle-plot",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualization-using-cycle-plot",
    "title": "Take-home_Ex3",
    "section": "5.2 Visualization Using Cycle Plot",
    "text": "5.2 Visualization Using Cycle Plot\n\ncols &lt;- c(\"1983\" = \"blue\", \"1993\" = \"green\",\n          \"2003\" = \"pink\", \"2013\" = \"red\",\n          \"2023\" = \"orange\")\np &lt;- weather %&gt;% \n  newggslopegraph(Day,mean_temp,Year,\n                Title = \"Temperature change across selected year\",\n                SubTitle = \"1961-1980\",\n                LineColor = cols,\n                DataTextSize = 0) +\n  theme(panel.background = element_rect(fill=\"grey\",colour=\"white\"),\n        legend.position = \"right\")\n\nggplotly(p)\n\n\n\n\n\nIn this graph, different color represent the temperature of different years. The left side represent the start of the month and the right side represent the end of the month.\n\nThis graph can help users to observe the general trend of the temperature change across the year. Besides, this graph also can demonstrate a ranking of the year in terms of degree of the temperature. In this case, when it is the start of the month, 2013 shows the highest temperature which is 28.8, but at end of the month, 2023 shows the highest temperature which is 29.4."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#assessing-uncertainty-using-ggdist-method",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#assessing-uncertainty-using-ggdist-method",
    "title": "Take-home_Ex3",
    "section": "5.3 Assessing uncertainty Using ggdist method",
    "text": "5.3 Assessing uncertainty Using ggdist method\n\n5.3.1 Calculate monthly mean temperature and temperature change for each year\n\nMonthly_Mean &lt;- weather %&gt;%\n  group_by(Year) %&gt;%\n  mutate(temp = mean(mean_temp)) %&gt;% \n  select (Year, Month, temp) %&gt;%\n  unique() %&gt;%\n  group_by(Month) %&gt;%\n  arrange(Year) %&gt;%\n  mutate(change = temp - lag(temp, default = temp[1]))\n\n\nhead(Monthly_Mean)\n\n# A tibble: 5 × 4\n# Groups:   Month [1]\n  Year  Month  temp change\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 1983      7  27.6  0    \n2 1993      7  27.9  0.271\n3 2003      7  28.1  0.261\n4 2013      7  27.8 -0.368\n5 2023      7  28.7  0.974\n\n\n\n\n5.3.2 Visualizing the temperature change range\n\nMonthly_Mean %&gt;%\n  ggplot(aes(x = 1, \n             y = change)) +\n  stat_pointinterval(\n    .width= c(0.65,0.99)\n  ) +\n  labs(\n    title = \"Visualising difference change of monthly mean temperature\",\n    subtitle = \"Mean Point + Multiple-interval plot\") +\n  scale_x_continuous(NULL, breaks = NULL) +\n  scale_y_continuous(\"°C Change\", breaks = seq(-.5,1,0.1), limits = c(-.5,1)) +\n  theme_minimal()\n\n\n\n\nIn this graph, it shows the temperature difference for each year which the range shows from -0.5 °C to 1 °C degree of floating. Besides, the graph shows that the most frequent degree of change mainly fall under around 0.3 °C of change. Therefore, the statement of “Daily mean temperature are projected to increase 1.4 to 4.6” it’s not valid. In this case, the temperature change degree of July in changi across this 5 year its below 1 °C."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#calculate-monthly-mean-temperature-and-temperature-change-for-each-year",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#calculate-monthly-mean-temperature-and-temperature-change-for-each-year",
    "title": "Take-home_Ex3",
    "section": "5.3.1 Calculate monthly mean temperature and temperature change for each year",
    "text": "5.3.1 Calculate monthly mean temperature and temperature change for each year\n\nMonthly_Mean &lt;- weather %&gt;%\n  group_by(Year) %&gt;%\n  mutate(temp = mean(mean_temp)) %&gt;% \n  select (Year, Month, temp) %&gt;%\n  unique() %&gt;%\n  group_by(Month) %&gt;%\n  arrange(Year) %&gt;%\n  mutate(change = temp - lag(temp, default = temp[1]))\n\n\nhead(Monthly_Mean)\n\n# A tibble: 5 × 4\n# Groups:   Month [1]\n  Year  Month  temp change\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 1983      7  27.6  0    \n2 1993      7  27.9  0.271\n3 2003      7  28.1  0.261\n4 2013      7  27.8 -0.368\n5 2023      7  28.7  0.974"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualizing-the-temperature-change-range",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualizing-the-temperature-change-range",
    "title": "Take-home_Ex3",
    "section": "5.3.2 Visualizing the temperature change range",
    "text": "5.3.2 Visualizing the temperature change range\n\nMonthly_Mean %&gt;%\n  ggplot(aes(x = 1, \n             y = change)) +\n  stat_pointinterval(\n    .width= c(0.65,0.99)\n  ) +\n  labs(\n    title = \"Visualising difference change of monthly mean temperature\",\n    subtitle = \"Mean Point + Multiple-interval plot\") +\n  scale_x_continuous(NULL, breaks = NULL) +\n  scale_y_continuous(NULL, breaks = seq(-.5,1,0.1), limits = c(-.5,1)) +\n  theme_minimal()"
  }
]