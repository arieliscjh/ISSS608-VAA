---
title: "Hands-on_Ex4"
date: "January 21,2024"
date-modified: "last-modified"
execute: 
  eval: true 
  echo: true
  warning: false
editor: visual 
---

# Visualizing Distribution

## 9.1 Learning outcome

Statistical graph methods for visualizing distribution: ridgeline plot and raincloud plot

## 9.2 Getting Started

### 9.2.1 Loading the packages

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

### 9.2.2 Importing data

```{r}
exam <- read_csv("data/Exam_data.csv")
```

## 9.3 Visualizing distribution with ridgeline plot

Ridgeline plot: revealing the distribution of a numeric value for several groups, using **histograms** or **density plot** and all aligned to the same horizontal scale and presented with a slight overlap.

-   More make sense when the number of group to represent is medium to high

-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups

### 9.3.1 Plotting ridgeline: ggridges method

1.  `geom_ridgeline()` : takes height values directly to draw the ridgeline
2.  `geom_density_ridges()` : first estimates data densities and then draws those using ridgelines.

```{r}
#| code-fold: true
#| code-summary: “Show the code”

ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### 9.3.2 Varying fill colors alone the x axis

This effect can be achieved by using either  [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)

```{r}
#| code-fold: true
#| code-summary: “Show the code”
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### 9.3.3 Mapping the probabilities directly onto color

This can achieved by using fucntion [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html)`.`

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```

### 9.3.4 Ridgeline plots with quantile lines

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

Quantiles can be defined by using color and percentage

```{r}
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```

## 9.4 Visualizing Distribution with Raincloud plot

Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. The rainclould (half-density) plot enhances the traditional box-plot by highlighting multiple moralities.

### 9.4.1 Plotting a half eye graph

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### 9.4.2 Adding the boxplot with `geom_boxplot()`

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)

```

### 9.4.3 Adding the dot plots with `stat_dots()`

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

### 9.4.4 Finishing touch

```{r}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```

# Visual Statistical Analysis

## 10.1 Learning Outcome

-   Create visual graphics with rich statistical information

-   performance package to visualize model diagnostics, and

-   parameters package to visualize model parameters

## 10.2 Visual Statistical analysis with ggstatsplot

-   To provide alternative statistical inference methods by default.

-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting.

## 10.3 Getting Started

### 10.3.1 Loading packages

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### 10.3.2 Importing data

```{r}
exam <- read_csv("data/Exam_data.csv")
```

### 10.4 One-Sample test: `gghistostats()` method

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

### 10.3.4 Unpacking the Bayes Factor 

### A Bayes factor 

-   is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

-   gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.

### 10.3.5 Interpretation of Bayes Factor

A Bayes factor can be any positive number

### 10.3.6 Two-sample mean test: `ggbetweenstats()` -Math score by Gender

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

### 10.3.7 Oneway ANOVA Test: `ggbetweenstats()` method- English score by race

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

-   \"ns\" → only non-significant

-   \"s\" → only significant

-   \"all\" → everything

#### 10.3.7.1 ggbetweenstats - Summary of tests

### **10.3.8 Significant Test of Correlation: *ggscatterstats()- Math score and English score***

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

### **10.3.9 Significant Test of Association (Depedence) : *ggbarstats()* methods**

```{r}
# Maths scores is binned into a 4-class variable by using cut().
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
# build a visual for significant test
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

## 10.9 Visualizing models 

You will learn how to visualise model diagnostic and model parameters by using parameters package

## 10.10 Getting started 

### 10.10.1 Loading the package

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

### 10.10.2 Importing data 

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

### 10.11 **Multiple Regression Model using lm()**

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### 10.11.1 **Checking for multicolinearity:**

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### 10.11.2 **Checking for normality** 

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n)
```

### 10.11.3 **Checking for homogeneity of variances**

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

### 10.11.4 Complete check

```{r}
check_model(model1)
```

### 10.12 **Visualising Regression Parameters: see methods**

```{r}
plot(parameters(model1))
```

### **10.13 Visualising Regression Parameters: *ggcoefstats()* methods**

```{r}
ggcoefstats(model1, 
            output = "plot")
```
